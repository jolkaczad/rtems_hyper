--
--                              POK header
-- 
--  The following file is a part of the POK project. Any modification should
--  be made according to the POK licence. You CANNOT use this file or a part 
--  of a file for your own project.
-- 
--  For more information on the POK licence, please see our LICENCE FILE
--
--  Please follow the coding guidelines described in doc/CODING_GUIDELINES
--
--                                      Copyright (c) 2007-2009 POK team 
--
--  Created by julien on Tue Aug  4 12:41:52 2009 
--
package arinchm

public

with Data_Model;
with POK;
with ARINC653;


data integer
properties
  Data_Model::Data_Representation => integer;
end integer;

virtual bus secure_bus
properties
   Required_Connection_Quality_Of_Service => (SecureDelivery);
   POK::Security_Level => 10;
end secure_bus;

virtual bus medium_bus
properties
   Required_Connection_Quality_Of_Service => (SecureDelivery);
   POK::Security_Level => 10;
end medium_bus;


virtual bus common_bus
properties
   Required_Connection_Quality_Of_Service => (SecureDelivery);
   POK::Security_Level => 10;
end common_bus;


virtual processor partition
properties
   ARINC653::HM_Errors  => (Numeric_Error, Illegal_Request);
   ARINC653::HM_Actions => (Nothing, Partition_Restart);
   POK::Additional_Features => (console);
end partition;

virtual processor implementation partition.secure
properties
   Provided_Virtual_Bus_Class => 
               (classifier (arinchm::secure_bus));
   ARINC653::HM_Errors => (Partition_Init, Partition_Scheduling, Partition_Handler, Partition_Config);
   ARINC653::HM_Actions => (Nothing, Partition_Stop, Partition_Restart, Partition_Restart);
   ARINC653::HM_Callback => classifier (arinchm::partitionhm);
   POK::Criticality => 10;
end partition.secure;

virtual processor implementation partition.common
properties
   POK::Criticality => 1;
   Provided_Virtual_Bus_Class => 
               (classifier (arinchm::common_bus));
   ARINC653::HM_Errors => (Partition_Init, Partition_Scheduling, Partition_Handler, Partition_Config);
   ARINC653::HM_Actions => (Nothing, Partition_Stop, Partition_Restart, Partition_Restart);
end partition.common;


subprogram hello_part1
features
   output : out parameter integer;
properties
   source_name => "user_send";
   source_language => C;
   Source_Text => ("../../../send.o");
   Source_Code_Size  => 2 Kbyte;
   Source_Data_Size  => 2 Kbyte;
end hello_part1;

subprogram hello_part2
features
   input : in parameter integer;
properties
   Source_Text => ("../../../receive.o");
   source_language => C;
   source_name => "user_receive";
   Source_Code_Size  => 2 Kbyte;
   Source_Data_Size  => 2 Kbyte;
end hello_part2;

processor ppc
properties
   POK::Architecture => x86;
   POK::BSP => x86_qemu;
   ARINC653::HM_Errors => (Hardware_Fault);
   ARINC653::HM_Actions => (Module_Restart);
end ppc;

processor implementation ppc.impl
subcomponents
   partition_secure : virtual processor partition.secure;
   partition_common : virtual processor partition.common;
properties
   ARINC653::Module_Major_Frame => 1000ms;
   ARINC653::Partition_Slots => (500ms, 500ms);
   ARINC653::Slots_Allocation => ( reference (partition_common), reference (partition_secure));
   ARINC653::HM_Errors => (Module_Init, Module_Scheduling, Module_Config);
   ARINC653::HM_Actions => (Nothing, Module_Stop, Module_Restart);
   ARINC653::HM_Callback => classifier (arinchm::kernelhm);
end ppc.impl;

thread receive_ping
features
   datain : in event data port integer;
properties
   Priority => 1;
   Initialize_Entrypoint => classifier (arinchm::thread_starting);
   Dispatch_Protocol => Periodic;
   Recover_Execution_Time => 10 ms .. 20 ms;
   Period => 500 Ms;
   Source_Code_Size  => 3 Kbyte;
   Source_Data_Size  => 3 Kbyte;
   Source_Stack_Size => 3 KByte;
end receive_ping;

subprogram thread_starting
properties
   source_name => "user_thread_starting";
   source_language => C;
   Source_Text => ("../../../threadstart.o");
   Source_Code_Size  => 3 Kbyte;
   Source_Data_Size  => 3 Kbyte;
   Source_Stack_Size => 3 KByte;
end thread_starting;

thread send_ping
features
   dataout : out event data port integer {Compute_Deadline => 40 ms;};
properties
   Priority => 1;
   Dispatch_Protocol => Periodic;
   Period => 1000 Ms;
   Recover_Execution_Time => 10 ms .. 20 ms;
   Source_Code_Size  => 3 Kbyte;
   Source_Data_Size  => 3 Kbyte;
   Source_Stack_Size => 3 KByte;
end send_ping;

thread implementation send_ping.impl
calls 
   call1 : { pspg : subprogram hello_part1;};
connections
   parameter pspg.output -> dataout;
properties
   ARINC653::HM_Errors => (Deadline_Miss, Application_Error, Numeric_Error, Illegal_Request, Power_Fail, Memory_Violation, Hardware_Fault, Stack_Overflow);
   ARINC653::HM_Actions => (Process_Restart, Ignore, Partition_Restart, Partition_Stop, Ignore, Process_Restart, Process_Restart, Process_Restart);
end send_ping.impl;

thread implementation receive_ping.impl
calls 
   call1 : { pspg : subprogram hello_part2;};
connections
   parameter datain -> pspg.input;
properties

   ARINC653::HM_Errors => (Deadline_Miss, Application_Error, Numeric_Error, Illegal_Request, Power_Fail, Memory_Violation, Hardware_Fault, Stack_Overflow);
   ARINC653::HM_Actions => (Process_Restart, Ignore, Partition_Restart, Partition_Stop, Ignore, Process_Restart, Process_Restart, Process_Restart);
end receive_ping.impl;

subprogram partitionhm
properties
   source_name => "user_partitionhm";
   source_language => C;
   Source_Text => ("../../../partitionhm.o");
end partitionhm;

subprogram kernelhm
properties
   source_name => "user_kernelhm";
   source_language => C;
   Source_Text => ("../../../kernelhm.o");
end kernelhm;

process receive_ping_process
features
   pdatain : in event data port integer
            {Allowed_Connection_Binding_Class =>
                  (classifier (arinchm::medium_bus)); 
             Compute_Deadline => 30 ms;};
end receive_ping_process;

process send_ping_process
features
   pdataout : out event data port integer
      {Overflow_Handling_Protocol => DropOldest; 
		 Allowed_Connection_Binding_Class => (classifier (arinchm::secure_bus));
       Queue_Size => 2; 
       };
end send_ping_process;

process implementation receive_ping_process.impl
subcomponents
   thr : thread receive_ping.impl;
connections
   port pdatain -> thr.datain; 
end receive_ping_process.impl;

process implementation send_ping_process.impl
subcomponents
   thr : thread send_ping.impl;
connections
   port thr.dataout -> pdataout;
end send_ping_process.impl;

system node
end node;

memory partitionmemory
properties
   Word_Count => 80000;
   ARINC653::Memory_Kind => memory_code;
   ARINC653::Access_Type => read;
end partitionmemory;

memory mainmemory
end mainmemory;

memory implementation mainmemory.impl
subcomponents
   part1: memory partitionmemory 
               {ARINC653::Memory_Kind => memory_code;
                ARINC653::Access_Type => read;};
   part2: memory partitionmemory
               {ARINC653::Memory_Kind => memory_data;
               ARINC653::Access_Type => write;};
end mainmemory.impl;

bus separation_bus
end separation_bus;

bus implementation separation_bus.i
subcomponents
   common : virtual bus common_bus;
   secure : virtual bus secure_bus;
   medium : virtual bus medium_bus;
end separation_bus.i;


system implementation node.impl
subcomponents
   cpu : processor ppc.impl;
   pr1 : process send_ping_process.impl;
   pr2 : process receive_ping_process.impl;
   mem : memory mainmemory.impl;
   eth : bus separation_bus.i;
connections
   port pr1.pdataout -> pr2.pdatain
      {Allowed_Connection_Binding_Class => (classifier (arinchm::secure_bus));};
properties
   actual_processor_binding => 
      (reference (cpu.partition_secure)) applies to pr2;
   actual_processor_binding => 
      (reference (cpu.partition_common)) applies to pr1;
   actual_memory_binding =>
      (reference (mem.part1)) applies to pr1;
   actual_memory_binding =>
      (reference (mem.part2)) applies to pr2;
end node.impl;

end arinchm;
